node:
  id: test-client-productpage
  metadata:
    "istio.io/metadata": {
      namespace: default,
      workload_name: productpage,
      owner: /api/ns/deployment/product-deployment,
      labels: { app: productpage, version: V11 },
    }
stats_config:
  use_all_default_tags: false
  stats_tags:
  - tag_name: "reporter"
    regex: "(reporter\\.(.+?)\\.)"
  - tag_name: "source_namespace"
    regex: "(source_namespace\\.(.+?)\\.)"
  - tag_name: "source_workload"
    regex: "(source_workload\\.(.+?)\\.)"
  - tag_name: "source_workload_namespace"
    regex: "(source_workload_namespace\\.(.+?)\\.)"
  - tag_name: "source_principal"
    regex: "(source_principal\\.(.+?)\\.)"
  - tag_name: "source_app"
    regex: "(source_app\\.(.+?)\\.)"
  - tag_name: "source_version"
    regex: "(source_version\\.(.+?)\\.)"
  - tag_name: "destination_namespace"
    regex: "(destination_namespace\\.(.+?)\\.)"
  - tag_name: "destination_workload"
    regex: "(destination_workload\\.(.+?)\\.)"
  - tag_name: "destination_workload_namespace"
    regex: "(destination_workload_namespace\\.(.+?)\\.)"
  - tag_name: "destination_principal"
    regex: "(destination_principal\\.(.+?)\\.)"
  - tag_name: "destination_app"
    regex: "(destination_app\\.(.+?)\\.)"
  - tag_name: "destination_version"
    regex: "(destination_version\\.(.+?)\\.)"
  - tag_name: "destination_service_host"
    regex: "(destination_service_host\\.(.+?)\\.)"
  - tag_name: "destination_service_name"
    regex: "(destination_service_name\\.(.+?)\\.)"
  - tag_name: "destination_service_namespace"
    regex: "(destination_service_namespace\\.(.+?)\\.)"
  - tag_name: "request_protocol"
    regex: "(request_protocol\\.(.+?)\\.)"
  - tag_name: "response_code"
    regex: "(response_code\\.(.+?)\\.)|_rq(_(\\d{3}))$"
  - tag_name: "response_flags"
    regex: "(response_flags\\.(.+?)\\.)"
  - tag_name: "connection_security_policy"
    regex: "(connection_security_policy\\.(.+?)\\.)"
  - tag_name: "cache"
    regex: "(cache\\.(.+?)\\.)"
static_resources:
  listeners:
  - name: client
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          stat_prefix: ingress_http
          codec_type: auto
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route: 
                  cluster: server
          http_filters:
          - name: envoy.wasm
            config:
              vm_config:
                vm: "envoy.wasm.vm.null"
                code:
                  inline_string: "envoy.wasm.metadata_exchange"
              configuration: "test"
          - name: envoy.wasm
            config:
              vm_config:
                vm: "envoy.wasm.vm.null"
                code:
                  inline_string: "envoy.wasm.stats"
              configuration: |
                { "direction": "OUTBOUND", "debug": "false", max_peer_cache_size: 20 }
          - name: envoy.router
            config: {}
          access_log:
          - name: envoy.file_access_log
            config:
              path: "/dev/null"
              format: "client %RESPONSE_CODE% downstream_id:%DYNAMIC_METADATA(envoy.wasm.metadata_exchange.downstream_id)% downstream:%DYNAMIC_METADATA(envoy.wasm.metadata_exchange.downstream)% upstream_id:%DYNAMIC_METADATA(envoy.wasm.metadata_exchange.upstream_id)% upstream:%DYNAMIC_METADATA(envoy.wasm.metadata_exchange.upstream)%\n"
  clusters:
  - name: server
    connect_timeout: 0.25s
    type: static
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: 127.0.0.1
        port_value: 8081
    http2_protocol_options: {}
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
